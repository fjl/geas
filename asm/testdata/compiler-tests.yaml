assemble-directive:
  input:
    code: |
      push 1
      push 1
      add
      #assemble "file.eas"
    files:
      file.eas: |
        add
        label:
        jump @label
  output:
    bytecode: '6001 6001 01 01 5b 6001 56'

assemble-directive-and-globals:
  # this reproduces an issue where global definitions got destroyed by #assemble
  input:
    code: |
      #define Global = 1
      push 1
      push Global
      add
      #assemble "file.eas"
    files:
      file.eas: |
        add
        label:
        jump @label
  output:
    bytecode: '6001 6001 01 01 5b 6001 56'

assemble-directive-globals-not-shared:
  input:
    code: |
      #define Global = 1
      push 1
      push Global
      add
      #assemble "file.eas"
    files:
      file.eas: |
        push Global
        add
        label:
        jump @label
  output:
    errors:
      - "file.eas:1: undefined macro Global"

assemble-directive-fork-inherit:
  input:
    code: |
      #pragma target "berlin"
      push 1
      #assemble "file.eas"
    files:
      file.eas: |
        random
  output:
    errors:
      - 'file.eas:1: unknown op RANDOM (target = "berlin"; added in fork "paris")'

assemble-directive-fork-override:
  input:
    code: |
      #pragma target "berlin"
      push 1
      #assemble "file.eas"
    files:
      file.eas:  |
        #pragma target "paris"
        random
  output:
    bytecode: '600144'

bytes-directive:
  input:
    code: |
      #bytes 0x010203
      push2 0x0405
  output:
    bytecode: '010203610405'

bytes-directive-literal-padding:
  input:
    code: |
      #bytes 0x00010203
      #bytes 0x000405
  output:
    bytecode: '00010203000405'

bytes-directive-literal-padding-odd-length:
  input:
    code: |
      #bytes 0x0010203
  output:
    errors:
      - ':1: odd-length hex in bytes context'

bytes-directive-string:
  input:
    code: |
      #bytes "abc"
  output:
    bytecode: '616263'

bytes-size-macro:
  input:
    code: |
      push .bytesSize(@label)
      .label: #bytes "abc"
  output:
    bytecode: '6003616263'

bytes-size-on-push:
  input:
    code: |
      push .bytesSize(@label)
      .label: push 0x010203
  output:
    errors:
      - ':1: .bytesSize: expected #bytes at pc=2, found PUSH instruction'

bytes-size-on-jumpdest:
  input:
    code: |
      push .bytesSize(@label)
      label: #bytes "abc"
  output:
    errors:
      - '.bytesSize: expected #bytes at pc=2, found JUMPDEST instruction'

comments-on-label:
  input:
    code: |
      JUMP @label
      label: ;; comment
      ADD ;; comment
  output:
    bytecode: "6003 56 5b 01"

dot-label-at-end:
  input:
    code: |
      PUSH @.end
      .end:
  output:
    bytecode: "6002"

dot-label-reference-1:
  input:
    code: |
      PUSH @end
      .end:
  output:
    bytecode: "6002"

dot-label-reference-2:
  input:
    code: |
      PUSH @.end
      end:
  output:
    errors:
      - ":1: can't use @.end to refer to label end:"

dot-label-begin:
  input:
    code: |
      .begin:
      push 1
      push 2
      add
      push @.begin
  output:
    bytecode: "6001 6002 01 6000"

expr-macro-passing-literal-to-builtin:
  input:
    code: |
      #define customMacro(x) = .address(x) + 2
      PUSH customMacro(0x658bdf435d810c91414ec09147daa6db62406379)
  output:
    errors:
      - ':2: .address(...) requires literal argument'

expr-macro-recursion:
  input:
    code: |
      #define rec(a) = rec(a+1) + 2
      #define parent(x) = rec(5)
      PUSH parent(1)
  output:
    errors:
      - ':3: recursive call of macro rec'

expr-macro-redefine-builtin:
  input:
    code: |
      #define .Address(x) = x*2
      PUSH .Address(0x2)
  output:
    errors:
      - ':1: attempt to redefine builtin macro .Address'

expr-macro-undefined:
  input:
    code: |
      PUSH unknownMacro(1, 2)
      PUSH unknownMacro2
  output:
    errors:
      - ':1: undefined macro unknownMacro'
      - ':2: undefined macro unknownMacro2'

expr-macro-undefined-in-label-expr:
  input:
    code: |
      PUSH @.label + unknownVar
      .label:
  output:
    errors:
      - ':1: undefined macro unknownVar'

expr-macro-undefined-in-label-expr2:
  input:
    code: |
      PUSH @label + unknownVar
      JUMP @label
      label:
  output:
    errors:
      - ':1: undefined macro unknownVar'

expr-macro-variable-binding-nested:
  input:
    code: |
      #define leaf(a) = $b+1
      #define parent(a, b) = leaf(10)
      PUSH parent(1, 2)
  output:
    errors:
      - ':3: undefined macro parameter $b'

expr-macro-legacy-syntax:
  input:
    code: |
      #define macro1 1
      #define macro2() 2
      #define macro3(a, b) ($a+$b)
      PUSH macro3(macro1, macro2)
  output:
    bytecode: "6003"
    warnings:
      - ":1: warning: legacy definition syntax, missing '=' before expression"
      - ":2: warning: legacy definition syntax, missing '=' before expression"
      - ":3: warning: legacy definition syntax, missing '=' before expression"

global-macros:
  input:
    code: |
      #include "macros.evm"
      %DoPush(Calculate(10))
      %DoPush(@.end)
      .end:
    files:
      macros.evm: |
        #define %DoPush(x) {
          push $x
        }
        #define Calculate(x) = $x*10
  output:
    bytecode: "60646004"

global-macro-undef:
  input:
    code: |
      push Calcullate(10)
    files:
      macros.evm: |
        #define Calculate(x) $x*10
  output:
    errors:
      - ':1: undefined macro Calcullate'

global-macros-include-after:
  input:
    code: |
      %DoPush(Calculate(10))
      %DoPush(@.end)
      .end:
      #include "macros.evm"
    files:
      macros.evm: |
        #define %DoPush(x) {
          push $x
        }
        #define Calculate(x) = $x*10
  output:
    bytecode: "60646004"

global-label:
  input:
    code: |
      #include "label.evm"
      jump @LABEL
    files:
      label.evm: |
        LABEL:
          push 1
  output:
    # TODO: compiler should use push0 here
    bytecode: "5b6001600056"

global-label-after:
  input:
    code: |
      jump @LABEL
      #include "label.evm"
    files:
      label.evm: |
        LABEL:
          push 1
  output:
    bytecode: "6003565b6001"

global-label-conflict-dotted:
  input:
    code: |
      jump @LABEL
      LABEL:
      #include "label.evm"
    files:
      label.evm: |
        .LABEL:
          push 1
  output:
    errors:
      - "label.evm:1: @.LABEL already defined (as jumpdest)"

global-label-in-macro:
  input:
    code: |
      #define %glob(x) {
      .GLOBAL: add
      }
      %glob(1)
      %glob(2)
  output:
    errors:
      - ':2: @.GLOBAL already defined by invocation of %glob at :4'

global-label-redefine-toplevel:
  input:
    code: |
      .GLOBAL: add
      .GLOBAL: add2
  output:
    errors:
      - ':2: @.GLOBAL already defined'

global-label-redefine-include:
  input:
    code: |
      #include "f1.evm"
      #include "f1.evm"
    files:
      f1.evm: |
        GLOBAL: add
  output:
    errors:
      - 'f1.evm:1: @GLOBAL already defined by #include "f1.evm" at :1'

global-label-redefine-include-macro:
  input:
    code: |
      #include "mac.evm"
      %MAC
      %MAC
    files:
      mac.evm: |
        stop
        #define %MAC {
          #include "label.evm"
        }
      label.evm: |
        LABEL:
          JUMP @LABEL
  output:
    errors:
      - 'label.evm:1: @LABEL already defined by #include "label.evm" at mac.evm:3'

global-label-in-macro-not-called:
  input:
    code: |
      #include "mac.evm"
      JUMP @LABEL
    files:
      mac.evm: |
        stop
        #define %MAC {
          #include "label.evm"
        }
      label.evm: |
        LABEL:
  output:
    errors:
      - ':2: @LABEL not instantiated in program'

global-macro-redefine:
  input:
    code: |
      #include "instr.evm"
      #include "instr.evm"
      #include "expr.evm"
      #include "expr.evm"
    files:
      instr.evm: |
        #define %IMAC {
          add
        }
      expr.evm: |
        #define EMAC = 12
  output:
    errors:
      - 'instr.evm:1: macro %IMAC already defined by #include "instr.evm" at :1'
      - 'expr.evm:1: macro EMAC already defined by #include "expr.evm" at :3'

# this tests setting a global from outside the compiler
global-external:
  input:
    code: |
      push TEST_GLOBAL+1
    globals:
      TEST_GLOBAL: 10
  output:
    bytecode: "600b"

global-external-call-with-params:
  input:
    code: |
      push TEST_GLOBAL(1, 2, 3)
    globals:
      TEST_GLOBAL: 10
  output:
    errors:
      - ':1: invalid number of arguments, macro TEST_GLOBAL needs 0'

global-override-macro-with-params-warning:
  input:
    code: |
      #include "inc.evm"
      push G
    files:
      inc.evm: |
        #define G(x) = x+1
    globals:
      G: 5
  output:
    bytecode: '6005'
    warnings:
      - 'inc.evm:1: warning: overridden global macro G has parameters'

include-basic:
  input:
    code: |
      #include "a.evm"
      push 2
      stop
    files:
      a.evm: |
        push 1
        push 1
        add
  output:
    bytecode: "6001 6001 01 6002 00"

include-pragma-fork-disallowed:
  input:
    code: |
      #include "a.evm"
    files:
      a.evm: |
        #pragma target "berlin"
  output:
    errors:
      - "a.evm:1: #pragma target cannot be used in #include'd files"

include-depth-limit:
  input:
    code: '#include "a.evm"'
    files:
      a.evm: |
        #include "b.evm"
      b.evm: |
        #include "a.evm"
  output:
    errors:
      - 'b.evm:1: #include depth limit reached'

include-macro-private:
  input:
    code: |
      #include "a.evm"
      #include "b.evm"
    files:
      a.evm: |
        #define em(x) = 1
        #define %im(x) {
          push em(5)
          add
        }
        %im(5)
      b.evm: |
        #define em(x) = 2
        #define %im(x) {
          push em(5)
          sub
        }
        %im(5)
  output:
    bytecode: "6001 01 6002 03"

include-relative-path:
  input:
    code: |
      #include "dir/subdir/file.evm"
    files:
      "dir/other/file.evm": |
        #include "neighbor.evm"
      dir/other/neighbor.evm: |
        push "neighbor"
      dir/subdir/file.evm: |
        #include "../other/file.evm"
  output:
    bytecode: "676e65696768626f72"

instr-macro-def-with-params:
  input:
    code: |
      #define %myInstrMacro(a, b) {
        push $a + 1
        push $b + 2
        add
      }

      div
      %myInstrMacro(1, 2)
      mul
  output:
    bytecode: "04 6002 6004 01 02"

instr-macro-def-missing-percent:
  input:
    code: |
      #define myInstrMacro(a, b) {
        push $a + 1
        push $b + 2
        add
      }
  output:
    errors:
      - ':1: unexpected { in expression macro definition'
      - ':5: unexpected closing brace }'

instr-macro-def-without-params:
  input:
    code: |
      #define %myInstrMacro {
        push 1
        push 2
        add
      }

      div
      %myInstrMacro
      mul
  output:
    bytecode: "04 6001 6002 01 02"

instr-macro-include:
  input:
    code: |
      #define %doInclude {
        #include "inc.evm"
        #include "inc.evm"
      }
      %doInclude
    files:
      inc.evm: |
        .label:
        push @.label
  output:
    bytecode: "6000 6002"

instr-macro-inner-label:
  input:
    code: |
      #define %hasInnerLabel() {
        jumpi @theLabel
        push 2
      theLabel:
      }

      push 1
      %hasInnerLabel()
      push 1
      theLabel: stop
  output:
    bytecode: "6001 6007 57 6002 5b 6001 5b 00"
    warnings:
      - ':10: warning: label @theLabel unused in program'

instr-macro-outer-label:
  input:
    code: |
      #define %jumpToOuter() {
        jumpi @outer
      }
      push 1
      %jumpToOuter()
      push 2
      outer: stop
  output:
    bytecode: "6001 6007 57 6002 5b 00"

instr-macro-global-ref-local:
  input:
    code: |
      %Gmac
      #include "incfile.eas"
    files:
      incfile.eas: |
        #define %Gmac {
           %local
        }
        #define %local {
           push 1
        }
  output:
    bytecode: "6001"

instr-macro-recursion:
  input:
    code: |
      #define %rec(a) {
        %parent(a+1)
      }
      #define %parent(x) {
        %rec(x)
      }
      %parent(1)
  output:
    errors:
      - ':2: recursive call of macro %parent'

instr-macro-redefine-builtin:
  input:
    code: |
      #define .address(x) { }
      %address(0x2)
  output:
    errors:
      - ':1: attempt to redefine builtin macro .address'

instr-macro-use-multiple-times:
  input:
    code: |
      #define %macro() {
        push @.label
      .label:
      }
      %macro()
      %macro()
      %macro()
  output:
    bytecode: "6002 6004 6006"

instr-macro-variable-shadow:
  input:
    code: |
      #define %inner(shadow) {
        push $shadow
      }
      #define %outer(shadow) {
        push $shadow
        %inner($shadow + 1)
      }
      %outer(1)
  output:
    bytecode: "6001 6002"

opcode-unknown-in-fork:
  input:
    code: |
      #pragma target "berlin"
      basefee
  output:
    errors:
      - ':2: unknown op BASEFEE (target = "berlin"; added in fork "london")'

opcode-removed-in-fork:
  input:
    code: |
      #pragma target "shanghai"
      difficulty
  output:
    errors:
      - ':2: unknown op DIFFICULTY (target = "shanghai"; removed in fork "paris")'

opcode-unknown-with-args:
  input:
    code: |
      #pragma target "cancun"
      myop(foo)
  output:
    errors:
      - ':2: unknown op MYOP'

opcode-known-with-args:
  input:
    code: |
      call(1)
  output:
    errors:
      - ':1: only JUMP* and PUSH* support immediate arguments'

jump:
  input:
    code: |
      JUMP @label
      label:
  output:
    bytecode: "6003 56 5b"

jump-dotted-label:
  input:
    code: |
      JUMP @.wrong
      .wrong: STOP
  output:
    errors:
      - ':1: JUMP to dotted label @.wrong'

jump-dotted-label-2:
  input:
    code: |
      JUMP @wrong
      .wrong: STOP
  output:
    errors:
      - ':1: JUMP to dotted label @wrong'

jump-undefined-label:
  input:
    code: |
      JUMP @wrong
      right: STOP
  output:
    errors:
      - ':1: JUMP to undefined label @wrong'

jump-with-expression-argument:
  input:
    code: |
      JUMP 1 + 2
  output:
    errors:
      - ':1: JUMP argument must be literal label'

jump-without-argument:
  input:
    code: |
      PUSH @label
      JUMP
      label:
  output:
    bytecode: "6003 56 5b"

label-def-after-use:
  input:
    code: |
      PUSH @label
      label:
  output:
    bytecode: "6002 5b"

label-def-before-use:
  input:
    code: |
      GAS
      label:
      PUSH @label
  output:
    bytecode: "5a 5b 6001"

label-same-line-as-inst:
  input:
    code: |
      label: JUMP @label
  output:
    # TODO: compiler should output push0 zero here
    bytecode: "5b 6000 56"

macro-call:
  input:
    code: |
      #define myMacro(a, b) = (100 + $a) / $b
      ADD
      PUSH myMacro(4, 2)
  output:
    bytecode: "01 6034"

macro-ref:
  input:
    code: |
      #define myMacro = 100
      ADD
      PUSH myMacro
  output:
    bytecode: "01 60 64"

macro-ref-call-empty:
  input:
    code: |
      #define myMacro() = 100
      ADD
      PUSH myMacro
  output:
    bytecode: "01 6064"

macro-ref-call-empty-2:
  input:
    code: |
      #define myMacro = 100
      ADD
      PUSH myMacro()
  output:
    bytecode: 01 6064

push-expression:
  input:
    code: |
      PUSH ((1299933 * 2) / 4) + @label
      label: STOP
  output:
    bytecode: "6209eaf2 5b 00"

push-hex-leading-zero:
  input:
    code: |
      PUSH 0x00000102
  output:
    bytecode: '610102'

push-overflow-256bits:
  input:
    code: |
      PUSH (1 << 256)
  output:
    errors:
      - ':1: instruction argument > 256 bits'

push-value-overflow:
  input:
    code: |
      PUSH2 0xffff01
  output:
    errors:
      - ':1: instruction argument overflows explicitly given PUSH<n> size'

push-negative:
  input:
    code: |
      PUSH 0 - 1
  output:
    errors:
      - ':1: expression result is negative number'

push0-explicit:
  input:
    code: |
      push0
  output:
    bytecode: "5f"

push0-implicit:
  input:
    code: |
      push 0
  output:
    bytecode: "5f"

# this checks that the compiler won't emit PUSH0 if the fork doesn't support it.
push0-implicit-not-in-fork:
  input:
    code: |
      #pragma target "frontier"
      push 0
  output:
    bytecode: "6000"

push0-explicit-not-in-fork:
  input:
    code: |
      #pragma target "berlin"
      push0
  output:
    errors:
      - ':2: unknown op PUSH0 (target = "berlin"; added in fork "shanghai")'

unicode-ident:
  input:
    code: |
      läbel:
        PUSH @läbel
  output:
    bytecode: '5b6000'

pragma-fork-dup:
  input:
    code: |
      #pragma target "berlin"
      #pragma target "berlin"
  output:
    errors:
      - ":2: duplicate '#pragma target ...' directive"

pragma-fork-dup-2:
  input:
    code: |
      #pragma target "berlin"
      #pragma target "cancun"
  output:
    errors:
      - ":2: duplicate '#pragma target ...' directive"

pragma-fork-bad-syntax:
  input:
    code: |
      #pragma target = "berlin"
      #pragma target cancun
  output:
    errors:
      - ":1: unexpected = after #pragma target"
      - ":2: #pragma option value must be string or number literal"

pragma-unknown:
  input:
    code: |
      #pragma something 1
  output:
    errors:
      - ':1: unknown #pragma something'

unused-label-warning:
  input:
    code: |
      top:
        push 1
        push 2
        add
        jump @top
      end:
  output:
    bytecode: "5b60016002016000565b"
    warnings:
      - ':6: warning: label @end unused in program'

unused-label-in-include:
  input:
    code: |
      top:
        push 1
        push 2
        add
      #include "label.evm"
        jump @top
    files:
      label.evm: |
        push 3
        label:
  output:
    bytecode: "5b600160020160035b600056"
    warnings:
      - 'label.evm:2: warning: label @label unused in program'

unused-label-in-macroexpansion:
  input:
    code: |
      #define %mac {
      loop:
        push 1
      }
      %mac
      %mac ;; should only warn once
  output:
    bytecode: "5b 6001 5b 6001"
    warnings:
      - ':2: warning: label @loop unused in program'

unreachable-code-stop:
  input:
    code: |
      push 1
      push 2
      stop
      add
  output:
    bytecode: "6001 6002 00 01"
    warnings:
      - ":4: warning: unreachable code (previous instruction is STOP at :3)"

unreachable-code-jump:
  input:
    code: |
      push 1
      push 2
      jump @label
      add
      label:
  output:
    bytecode: "6001 6002 6008 56 01 5b"
    warnings:
      - ":4: warning: unreachable code (previous instruction is JUMP at :3)"

unreachable-code-warning-in-macro:
  input:
    code: |
      #define %mac {
      #include "foo.eas"
          push 1
          push 2
          add
      }
      %mac
    files:
      foo.eas: |
        stop
  output:
    bytecode: "00 6001 6002 01"
    warnings:
      - ":3: warning: unreachable code (previous instruction is STOP at foo.eas:1)"

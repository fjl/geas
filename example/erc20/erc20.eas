;;; ERC20
;;;
;;; Minimal ERC-20 implementation in raw assembly.
;;;
;;; Storage Layout
;;; --
;;; balance(address)          => 0x000000000000000000000000 || address
;;; allowance(owner, spender) => keccak(owner || spender)

#pragma target "constantinople"

#define %match(candidate, label) { ; [selector]
    dup1             ; [selector, selector]
    push $candidate  ; [candidate, selector, selector]
    eq               ; [success, selector]
    push $label      ; [label, success, selector]
    jumpi            ; [selector]
}

.start:
    ;; Read the calldata into memory.
    calldatasize     ; [calldatasize]
    push 0           ; [0, calldatasize]
    dup1             ; [0, 0, calldatasize]
    calldatacopy     ; []

    ;; Extract only the function selector
    push 0           ; [0]
    mload            ; [dirty_selector]
    push 224         ; [224, dirty_selector]
    shr              ; [selector]

    ;; Jump to the selected function.
    %match(S_transferFrom, @TransferFrom)
    %match(S_approve, @Approve)
    %match(S_transfer, @Transfer)

    ;; Check the view functions last to not waste gas on-chain.
    %match(S_balanceOf, @BalanceOf)
    %match(S_allowance, @Allowance)
    %match(S_decimals, @Return0)
    %match(S_totalSupply, @Return0)

                     ; [selector] is left on stack here.

FAIL:
    ;; Catchall for reverts.
    push 0           ; [0, selector]
    push 0           ; [0, 0, selector]
    revert           ; [selector]

;;; Write operations.
;;; These do not return, so there are STOPs in between.

#include "op_transferFrom.eas"
    stop
#include "op_approve.eas"
    stop
#include "op_transfer.eas"
    stop

;;; View functions, these return on their own.

#include "op_balanceOf.eas"
#include "op_allowance.eas"

;;; View functions for token metadata, these just return zero.

#define S_decimals .selector("decimals()")
#define S_totalSupply .selector("totalSupply()")

Return0:
